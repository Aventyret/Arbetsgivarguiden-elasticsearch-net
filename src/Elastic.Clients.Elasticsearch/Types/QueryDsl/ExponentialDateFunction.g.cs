// Licensed to Elasticsearch B.V under one or more agreements.
// Elasticsearch B.V licenses this file to you under the Apache 2.0 License.
// See the LICENSE file in the project root for more information.
//
// ███╗   ██╗ ██████╗ ████████╗██╗ ██████╗███████╗
// ████╗  ██║██╔═══██╗╚══██╔══╝██║██╔════╝██╔════╝
// ██╔██╗ ██║██║   ██║   ██║   ██║██║     █████╗
// ██║╚██╗██║██║   ██║   ██║   ██║██║     ██╔══╝
// ██║ ╚████║╚██████╔╝   ██║   ██║╚██████╗███████╗
// ╚═╝  ╚═══╝ ╚═════╝    ╚═╝   ╚═╝ ╚═════╝╚══════╝
// ------------------------------------------------
//
// This file is automatically generated.
// Please do not edit these files manually.
//
// ------------------------------------------------

#nullable restore

using Elastic.Clients.Elasticsearch.Fluent;
using Elastic.Clients.Elasticsearch.Serialization;
using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Elastic.Clients.Elasticsearch.QueryDsl;

public sealed partial class ExponentialDateFunction
{
	[JsonInclude, JsonPropertyName("field")]
	public Elastic.Clients.Elasticsearch.Field? Field { get; set; }
	[JsonInclude, JsonPropertyName("origin")]
	private DateTime? OriginValue { get; set; }
	[JsonInclude, JsonPropertyName("scale")]
	private string? ScaleValue { get; set; }
	[JsonInclude, JsonPropertyName("offset")]
	private string? OffsetValue { get; set; }
	[JsonInclude, JsonPropertyName("decay")]
	private double? DecayValue { get; set; }

	public static implicit operator FunctionScore(ExponentialDateFunction ExponentialDateFunction) => QueryDsl.FunctionScore.ExponentialDate(ExponentialDateFunction);
}

public sealed partial class ExponentialDateFunctionDescriptor<TDocument> : SerializableDescriptor<ExponentialDateFunctionDescriptor<TDocument>>
{
	internal ExponentialDateFunctionDescriptor(Action<ExponentialDateFunctionDescriptor<TDocument>> configure) => configure.Invoke(this);

	public ExponentialDateFunctionDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Field? FieldValue { get; set; }
	private DateTime? OriginValue { get; set; }
	private string? ScaleValue { get; set; }
	private string? OffsetValue { get; set; }
	private double? DecayValue { get; set; }

	public ExponentialDateFunctionDescriptor<TDocument> Field(Elastic.Clients.Elasticsearch.Field? field)
	{
		FieldValue = field;
		return Self;
	}

	public ExponentialDateFunctionDescriptor<TDocument> Field<TValue>(Expression<Func<TDocument, TValue>> field)
	{
		FieldValue = field;
		return Self;
	}

	public ExponentialDateFunctionDescriptor<TDocument> Origin<TValue>(DateTime origin)
	{
		OriginValue = origin;
		return Self;
	}

	public ExponentialDateFunctionDescriptor<TDocument> Scale<TValue>(string scale)
	{
		ScaleValue = scale;
		return Self;
	}

	public ExponentialDateFunctionDescriptor<TDocument> Offset<TValue>(string offset)
	{
		OffsetValue = offset;
		return Self;
	}

	public ExponentialDateFunctionDescriptor<TDocument> Decay<TValue>(double decay)
	{
		DecayValue = decay;
		return Self;
	}

	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		if (FieldValue is not null)
		{
			writer.WritePropertyName("field");
			JsonSerializer.Serialize(writer, FieldValue, options);
		}

		if (OriginValue is not null)
		{
			writer.WritePropertyName("origin");
			JsonSerializer.Serialize(writer, OriginValue, options);
		}

		if (ScaleValue is not null)
		{
			writer.WritePropertyName("scale");
			JsonSerializer.Serialize(writer, ScaleValue, options);
		}

		if (OffsetValue is not null)
		{
			writer.WritePropertyName("offset");
			JsonSerializer.Serialize(writer, OffsetValue, options);
		}

		if (DecayValue is not null)
		{
			writer.WritePropertyName("decay");
			JsonSerializer.Serialize(writer, DecayValue, options);
		}

		writer.WriteEndObject();
	}
}

public sealed partial class ExponentialDateFunctionDescriptor : SerializableDescriptor<ExponentialDateFunctionDescriptor>
{
	internal ExponentialDateFunctionDescriptor(Action<ExponentialDateFunctionDescriptor> configure) => configure.Invoke(this);

	public ExponentialDateFunctionDescriptor() : base()
	{
	}

	private Elastic.Clients.Elasticsearch.Field? FieldValue { get; set; }
	private DateTime? OriginValue { get; set; }
	private string? ScaleValue { get; set; }
	private string? OffsetValue { get; set; }
	private double? DecayValue { get; set; }


	public ExponentialDateFunctionDescriptor Field(Elastic.Clients.Elasticsearch.Field? field)
	{
		FieldValue = field;
		return Self;
	}

	public ExponentialDateFunctionDescriptor Field<TDocument, TValue>(Expression<Func<TDocument, TValue>> field)
	{
		FieldValue = field;
		return Self;
	}

	public ExponentialDateFunctionDescriptor Field<TDocument>(Expression<Func<TDocument, object>> field)
	{
		FieldValue = field;
		return Self;
	}

	public ExponentialDateFunctionDescriptor Origin(DateTime origin)
	{
		OriginValue = origin;
		return Self;
	}

	public ExponentialDateFunctionDescriptor Scale(string scale)
	{
		ScaleValue = scale;
		return Self;
	}

	public ExponentialDateFunctionDescriptor Offset(string offset)
	{
		OffsetValue = offset;
		return Self;
	}

	public ExponentialDateFunctionDescriptor Decay(double decay)
	{
		DecayValue = decay;
		return Self;
	}


	protected override void Serialize(Utf8JsonWriter writer, JsonSerializerOptions options, IElasticsearchClientSettings settings)
	{
		writer.WriteStartObject();
		writer.WritePropertyName(FieldValue.Name);
		writer.WriteStartObject();

		if (OriginValue is not null)
		{
			writer.WritePropertyName("origin");
			JsonSerializer.Serialize(writer, OriginValue, options);
		}

		if (ScaleValue is not null)
		{
			writer.WritePropertyName("scale");
			JsonSerializer.Serialize(writer, ScaleValue, options);
		}

		if (OffsetValue is not null)
		{
			writer.WritePropertyName("offset");
			JsonSerializer.Serialize(writer, OffsetValue, options);
		}

		if (DecayValue is not null)
		{
			writer.WritePropertyName("decay");
			JsonSerializer.Serialize(writer, DecayValue, options);
		}
		writer.WriteEndObject();
		writer.WriteEndObject();
	}
}
